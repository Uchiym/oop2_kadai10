第10回課題テンプレート

# 第10回振り返りレポート

## 1. GitHubアカウント

| 氏名           | 学籍番号    | GitHubアカウント(登録メールアドレス) |
| -------------- | ----------- | -------------------------------------- |
| 内山　将瑠      | K20018      | Uchiym (k20018kk@aitech.ac.jp) |

## 2. 作成した日記リポジトリのコミットログ

ターミナルで、作成した日記リポジトリのローカルディレクトリにて、mainブランチをfetch/pullした後に、`$ git --no-pager log --graph`を実行し、結果を以下の`<rpe>〜</pre>`内に貼り付けます。

<pre>

* commit ad03f72c7e631969288fa0d66b6cec28e6bff24c (HEAD -> Uchiym)
| Author: Uchiym <k20018kk@aitech.ac.jp>
| Date:   Thu Dec 9 16:40:17 2021 +0900
| 
|     日記追加
| 
* commit af889f5bd0873cbbbaf585167ddec31a15e284c0 (origin/T.Kabura)
| Author: Waowao531 <sao.wao76483484.silica1004@gmail.com>
| Date:   Thu Dec 9 15:54:17 2021 +0900
| 
|     Update AbstractDiary.py
| 
* commit 4e3e37e7985d12d1cdc3e8f7a01f2496062d910e
| Author: Uchiym <k20018kk@aitech.ac.jp>
| Date:   Thu Dec 9 15:42:35 2021 +0900
| 
|     main追加
| 
* commit 32c63da496d4190a599c41461a3f77f1888f7aca (origin/Noda_Dairy_edit)
| Author: Uchiym <k20018kk@aitech.ac.jp>
| Date:   Thu Dec 9 15:38:28 2021 +0900
| 
|     日記追加
| 
* commit 93a053f7cd98eb02de7149fa0b44132c4df2e250
  Author: Uchiym <95839110+Uchiym@users.noreply.github.com>
  Date:   Thu Dec 9 15:27:52 2021 +0900
  
      Initial commit

</pre>


## 3. Git及びGitHubに関する調査

以下の各項目について、インターネットや書籍を利用し調べ、自分なりの言葉で説明をしてください。(参考文献等あればそれも記載すること)

### 3-1. バージョン管理システムを利用することによるメリットはなにか
・変更履歴などを参照することができる。
・複数のメンバーでの共同作業が円滑に進みやすい。

### 3-2. Gitにおけるキーワード「clone」「commit」「push」「branch」「fetch」「pull」「merge」「rebase」についてそれぞれ何をするものか (他者に説明できるよう、わかりやすく簡潔な文章で表すこと)
・clone     既存のリポジトリをターゲットとして、ターゲットリポジトリのコピー。
・commit    ファイルの追加や変更をリポジトリに記録（保存）すること。
・push      ファイルの追加や変更の履歴をリモートリポジトリに送信すること。
・branch    コミット履歴の流れを分岐させて保存する方法のこと。
・fetch     リモートリポジトリで更新された最新情報をコミット無しで追加すること。
・pull      変更をフェッチしてローカルリポジトリを即時に更新すること。
・merge     分岐した履歴を戻し、統合する手段のこと。
・rebase    作業が完了したブランチを分岐元のブランチに連結させる時に使う機能のこと。


### 3-3. プロジェクト進行に、GitHub Flowを採用することで解決できるチーム開発での問題はなにか (実際にGitHub Flowで作業する手順も説明する)

・git-flowがdevelopやがreleaseなどの色々ブランチがあったのに対し、シンプルになる。
・Pull Requestが使用することができ、masterブランチが常にデプロイ可能ということ。


手順：    
    1. 開発リポジトリを、自分のアカウントへfork  
    2. masterブランチから、作業ブランチを切る  
    3. ローカルで開発、コミットしてForkしたブランチへPushする  
    4. 本家リポジトリへPRを出し、フィードバックを受けながら開発を進める  
    5. レビュワーに承認されたら、本家リポジトリへマージする  
    6. デプロイ

<参考文献>
[今さら聞けない！ バージョン管理システム「Git」とは？]https://pfs.nifcloud.com/navi/beginner/git.htm(2021/12/15閲覧)
[GitHub用語集](https://docs.github.com/ja/github-ae@latest/get-started/quickstart/github-glossary)(2021/12/15閲覧)
[3分で理解できる！git-rebaseとmergeとの違いまとめ](https://blog.codecamp.jp/git_rebase)(2021/12/15閲覧)
[Qiita-GitHub Flowとは](https://qiita.com/tatane616/items/aec00cdc1b659761cf88)(2021/12/15閲覧)